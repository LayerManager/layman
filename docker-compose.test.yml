version: '2.1'

volumes:
   geoserver-data:

services:
   layman_test:
      container_name: layman_test
      image: layman_dev:latest
      command: bash test.sh
      env_file:
         - .env.test
      volumes:
        - ./geoserver_data:/geoserver_data
        - ./layman_data_test:/layman_data_test
        - ./sample:/code/sample
        - ./src:/code/src
        - ./tmp:/code/tmp
        - ./test.sh:/code/test.sh
      depends_on:
        celery_worker_test:
          condition: service_healthy
        hslayers:
          condition: service_started

   db:
      image: kartoza/postgis:10.0-2.4
      volumes:
        - ./pg/postgres_data:/var/lib/postgresql
      ports:
        - "25433:5432"
      environment:
         - USERNAME=docker
         - PASS=docker
         - ALLOW_IP_RANGE=0.0.0.0/0
      restart: on-failure
      healthcheck:
        test: "exit 0"

   geoserver:
      image: kartoza/geoserver:2.13.0
      volumes:
        - ./geoserver_data:/opt/geoserver/data_dir
      ports:
        - "8600:8080"
      restart: on-failure
      env_file:
        - geoserver.env
      depends_on:
        db:
          condition: service_healthy
      healthcheck:
        test: curl --fail -s http://localhost:8080/ || exit 1
        interval: 1m30s
        timeout: 10s
        retries: 3

   redis:
      image: redis:4.0.11-alpine

   celery_worker_test:
      image: layman_dev:latest
      # use watchdog
      command: bash -c "cd src && watchmedo auto-restart -d . -p '*.py' --recursive -- python3 -m celery -Q $${LAYMAN_CELERY_QUEUE} -A layman.celery_app worker --loglevel=info"
      env_file: .env.test
      environment:
        - C_FORCE_ROOT=true
        - IS_CELERY_WORKER=true
      volumes:
        - ./layman_data_test:/layman_data_test
        - ./sample:/code/sample
        - ./src:/code/src
        - ./tmp:/code/tmp
      depends_on:
        db:
          condition: service_healthy
        geoserver:
          condition: service_healthy
        redis:
          condition: service_started

   hslayers:
      container_name: hslayers
      build:
        context: hslayers
        dockerfile: Dockerfile.production
        args:
           - LAYMAN_GS_HOST=${LAYMAN_GS_HOST}
           - LAYMAN_GS_PORT=${LAYMAN_GS_PORT}
      image: hslayers:latest
      command: sh -c "node proxy.js & ./node_modules/.bin/http-server dist/"
#      env_file:
#         - .env.dev
      ports:
        - 8080:8080
        - 8081:8081

