matrix:
  include:
    - name: "Integration Test"
      language: node_js

      sudo: required

      dist: trusty

      node_js:
        - "11"

      services:
      - docker

      before_install:
      - sudo rm -f /usr/local/bin/docker-compose
      - curl -L https://github.com/docker/compose/releases/download/1.18.0/docker-compose-`uname -s`-`uname -m` > docker-compose
      - chmod +x docker-compose
      - sudo mv docker-compose /usr/local/bin
      - sudo service docker restart
      - docker-compose -v
      - docker -v

      script:
      - make geoserver-reset-default-layman-datadir
      - cp .env.test .env
      - make test
      - npm install --global remark-cli remark-validate-links remark-lint-no-dead-urls
      - remark --frail *.md */*.md */*/*.md

      after_failure:
      - docker logs layman_celery_worker_test_1
      - docker logs timgen
      - docker logs micka
      - git clone https://jirik:${GITHUB_TOKEN}@gist.github.com/3c7f15736f03e8711d5dde8445f6b68d.git
        travis-artifacts
      - rm -rf travis-artifacts/*
      - cp tmp/artifacts/* travis-artifacts
      - cd travis-artifacts
      - git remote set-url origin https://jirik:${GITHUB_TOKEN}@gist.github.com/3c7f15736f03e8711d5dde8445f6b68d.git
      - git add .
      - git commit -m "Artifacts of build $TRAVIS_BUILD_NUMBER, commit $TRAVIS_COMMIT"
      - git push

      env:
        global:
          secure: rxRvrkqIGE67Okn6kDLqoWc6ysMk+SJIEec3hMIDSFcQeN1GXdwB5pyhQ1hS6WrZXfPVi2Z9zZxTFbRlUuxjAc+BznvKlaksAnCVWWKFrkgVXafqjtio3EJfk4x7Zb5rVthU+HSfY8zABtNQ7rrLcX7As6jdURHNZv6shwksPvLIYLOi5Tu1aUist7nfM/HOs49zJDd2GAGpR1AH5TYhzsoL2jILJ0BK7WT1KRRA93imAyRJppE9kf7MRkE8pq++24XY1nkW22nh1e5DhMPDgERIBIeiT7lvAt5/mhT3pbzHB0+cevIwRttoh5oxiAyO5sKed9HP4Nq9PvYOXkzMkk7J0zydsOf7M9xq64PqSUicyEBoqG7RcFoeDxyoMX363C7+/nfbfju7fn1cq1wle15KHPzwDGweUp3ulLM8nzuFEN+rUhIfrTYXT5DRmVjI50+uBkBFkS/m1FcU8qkxNlcFRCD/W8qeRNb8DLbQhQcQDEyP+cKvzxut+hdYcZGsuT9Mu7X1y7+R4dWXxuAGp9EK6hF4nzNMUTFO401mEkFTcEcXSyYjIWMI54nwQ/QLripIzNWi2zqGBl8l/pgqjB0rZDl74omB4WVslPCjbeNW7lA/LLL5J+JqcqDkBBLiwEVvOK1ucN/gPLMSZLhCCs47dBuZsQ54oLtt5Lngw+Y=

    - name: "Flake 8 syntax errors"
      language: python

      dist: trusty

      python:
        - "3.6"      # current default Python on Travis CI

      # command to install dependencies
      install:
        - pip install flake8

      before_install:
        - echo -e "machine github.com\n  login $GITHUB_TOKEN" > ~/.netrc
        - git lfs pull

      # command to run tests
      script:
        # stop the build if there are Python syntax errors or undefined names
#    E9 tests are about Python syntax errors usually raised because flake8 can not build an Abstract Syntax Tree (AST). Often these issues are a sign of unused code or code that has not been ported to Python 3. These would be compile-time errors in a compiled language but in a dynamic language like Python they result in the script halting/crashing on the user.
#    F63 tests are usually about the confusion between identity and equality in Python. Use ==/!= to compare str, bytes, and int literals is the classic case. These are areas where a == b is True but a is b is False (or vice versa).
#    F7 tests logic errors and syntax errors in type hints
#    F82 tests are almost always undefined names which are usually a sign of a typo, missing imports, or code that has not been ported to Python 3. These also would be compile-time errors in a compiled language but in Python a NameError is raised which will halt/crash the script on the user.
        - flake8 --count --select=E9,F63,F7,F82 --show-source --statistics ./src

    - name: "Flake 8 full report"
      language: python

      dist: trusty

      python:
        - "3.6"      # current default Python on Travis CI

      # command to install dependencies
      install:
        - pip install flake8

      before_install:
        - echo -e "machine github.com\n  login $GITHUB_TOKEN" > ~/.netrc
        - git lfs pull

      # command to run tests
      script:
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        - flake8 --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics ./src

    - name: "PyCodeStyle"
      language: python

      dist: trusty

      python:
        - "3.6"      # current default Python on Travis CI

      # command to install dependencies
      install:
        - pip install pycodestyle

      before_install:
        - echo -e "machine github.com\n  login $GITHUB_TOKEN" > ~/.netrc
        - git lfs pull

      # command to run tests
      script:
#E402 module level import not at top of file
#E501 line too long (619 > 127 characters)
#E711 comparison to None should be 'if cond is None:'
#E722 do not use bare 'except'
#W503 Line break occurred before a binary operator
#E741 ambiguous variable name 'l'
        - pycodestyle --count --max-line-length=127 --statistics --ignore=E402,E501,E711,E722,W503,E741 ./src

    - name: "Pylint"
      language: python

      dist: trusty

      python:
        - "3.6"      # current default Python on Travis CI

      # command to install dependencies
      install:
        - pip install pylint

      before_install:
        - echo -e "machine github.com\n  login $GITHUB_TOKEN" > ~/.netrc
        - git lfs pull

      # command to run tests
      script:
        - pylint -f colorized -r y --fail-under 5 ./src

    - name: "AutoPEP8"
      language: python

      dist: trusty

      python:
        - "3.6"      # current default Python on Travis CI

      # command to install dependencies
      install:
        - pip install autopep8

      before_install:
        - echo -e "machine github.com\n  login $GITHUB_TOKEN" > ~/.netrc
        - git lfs pull

      # command to run tests
      script:
        - autopep8 --recursive --diff --aggressive --aggressive --exit-code --ignore=E402,E501,E711,E722,W503,E741,E721 ./src

